<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="store">
 
	<select id="storeList" resultType="Store">
		with r_count as
		(
			select store_id, round(avg(score), 1) score,
					count(review_content) review_count, count(boss_comment) boss_comment_count
			from bm_review
			group by store_id
		),
		store as
		(
			select s.*, t.*,
					case when mod(24 - s.opening_time + s.closing_time, 24) != 0
					then mod(24 - s.opening_time + s.closing_time, 24) else 24 end bs_time
			from bm_store s
			left join r_count t
			on s.id = t.store_id
			where category = #{category}
			and store_address1 like '${storeAddress1}%'
			
		<if test="sort == '배달 빠른 순'">
			order by delevery_time
		</if>
		<if test="sort == '배달팁 낮은 순'">
			order by delevery_tip
		</if>
		<if test="sort == '별점 높은 순'">
			order by score
		</if>
		<if test="sort == '리뷰 많은 순'">
			order by review_count
		</if>
		<if test="sort == '최소 주문 금액 순'">
			order by min_delevery
		</if>
		)
		
		select * from
		(
			select rownum rn, result.*
			from
			(
				select c.*, 'true' is_open
				from store c
				where to_char(systimestamp, 'HH24') between opening_time and opening_time + bs_time
				union all
				
				select c.*, 'false' is_open
				from store c
				where to_char(systimestamp, 'HH24') not between opening_time and opening_time + bs_time
			) result
		)		
		where rn between #{firstList} and ${lastList}	
	</select>
	

	<select id="storeDetail" resultType="Store">
		select result.*, l.is_likes, case when to_char(sysdate, 'HH24') between opening_time and opening_time + bs_time
										then 'true' else 'false' end is_open
		from
		(
			select s.*, c.*, case when mod(24 - s.opening_time + s.closing_time, 24) != 0
								then mod(24 - s.opening_time + s.closing_time, 24) else 24 end bs_time
			from bm_store s,
			(
				select * from
				(
					select round(avg(score), 1) score, count(review_content) review_count,
							count(boss_comment) boss_comment_count, count(case when score=1 then 1 end) score1,
							count(case when score=2 then 1 end) score2, count(case when score=3 then 1 end) score3,
							count(case when score=4 then 1 end) score4, count(case when score=5 then 1 end) score5
					from bm_review
					where store_id=#{storeId}
				),
				(
					select count(*) likes_count
					from bm_likes
					where store_id=#{storeId}
				),
				(
					select sum(order_count) order_count
					from
					(
						select count(*) order_count
						from bm_order_user
						where store_id=#{storeId}
						union all
						select count(*) order_count
						from bm_order_non_user
						where store_id=#{storeId}
					)
				) 
			) c
			where id = #{storeId}
		) result
		left join
		(
			select store_id, 1 is_likes
			from bm_likes
			where exists
			(
				select 1
				from bm_likes
				where user_id=#{userId} and store_id=#{storeId}
			)
		) l
		on result.id = l.store_id
	</select>
	
	<select id="foodList" resultType="Food">
		select id, store_id, food_name, food_price, food_dec, food_img, food_thumb
		from bm_food
		where store_id = #{id}
	</select>
	
	<select id="foodOption" resultType="FoodOption">
		select id, food_id, option_name, option_price
		from bm_food_option
		where food_id=#{foodId}
	</select>
	
	<insert id="reviewWrite">
		insert into bm_review(order_num, store_id, review_content, user_id, score, review_img)
		values(${orderNum}, #{storeId}, #{reviewContent},#{userId},#{score},#{reviewImg})
	</insert>
	
	<select id="reviewList" resultType="Review">
		select r.order_num, r.store_id, r.review_content, r.boss_comment,
				r.regi_date, r.score, r.review_img, r.user_id, u.nickname
		from bm_review r
		left join bm_user u
		on r.user_id = u.id
		where r.store_id = #{id}
		order by regi_date DESC
	</select>
	
	<update id="reviewModify">
		update bm_review set review_content = #{reviewContent}, score=#{score}
								<if test="reviewImg != null">
									, review_img=#{reviewImg}
								</if>
		where order_num = ${orderNum}
	</update>
	
	<insert id="addLikes">
		insert into bm_likes(user_id, store_id)
		values(#{userId},#{storeId})
	</insert>
	
	<delete id="deleteLikes">
		delect bm_likes
		where user_id = #{userId}
		and store_id = #{storeId}
	</delete>
</mapper>